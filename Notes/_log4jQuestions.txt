*   What is log4J ?

>>  Log4j (short for "Log for Java") is a popular logging library for Java applications. It provides a flexible and
    configurable framework for logging messages from your Java code. Logging is essential for tracking the behavior of
    your application, debugging, monitoring, and auditing.

    Key features and components of Log4j include:

    (1) Loggers: Log4j allows you to create loggers in your Java code, which are named entities used to log messages.
        You can configure loggers to capture messages at different log levels (e.g., DEBUG, INFO, WARN, ERROR) and
        direct them to specific destinations.

    (2) Appenders: Appenders define where log messages are sent. Log4j supports various types of appenders, such as
        console appenders (for logging to the console), file appenders (for logging to files), socket appenders, and
        more. You can configure multiple appenders to log messages to different destinations simultaneously.

    (3) Layouts: Layouts determine the format of log messages. Log4j provides various layout options, allowing you to
        customize the appearance of log entries. Common layouts include plain text, HTML, JSON, and XML.

    (4) Log Levels: Log4j allows you to assign different log levels to log messages, such as DEBUG, INFO, WARN, ERROR,
        and FATAL. These levels help you control the verbosity of log output and filter messages based on their
        importance.

    (5) Logging Configuration: Log4j's behavior is highly configurable through a configuration file, typically named
        log4j.xml or log4j.properties. This file allows you to specify log levels for different loggers, configure
        appenders, and define log message formats.

    (6) Log Rotation: Log4j supports log rotation, which allows you to manage log files by creating new log files when
        the current one reaches a certain size or age. This is important for preventing log files from consuming too
        much disk space.

    (7) Thread Safety: Log4j is designed to be thread-safe, ensuring that multiple threads can safely log messages
        concurrently without issues like log file corruption or data loss.

    Log4j has been widely adopted in the Java community and is commonly used in both small-scale applications and
    large-scale enterprise systems. It provides a robust and flexible logging solution that helps developers manage and
    analyze application logs effectively. However, it's important to keep Log4j (and other dependencies) up to date,
    as security vulnerabilities in older versions have been identified in the past.
________________________________________________________________________________________________________________________

*   Why to go for log4j ?

>>   Here are some reasons why Log4j is often preferred in enterprise-level development:

    (1) Robustness: Log4j is a mature and well-tested logging framework, which makes it a reliable choice for
        mission-critical enterprise applications. It has a strong track record of stability and performance.

    (2) Customization: Log4j provides extensive customization options through its configuration file, allowing
        developers to tailor logging behavior to the specific needs of their applications.

    (3) Flexibility: It supports various output destinations (appenders), log levels, and message formats, making it
        versatile for different logging requirements in enterprise applications.

    (4) Thread Safety: Log4j is designed to be thread-safe, which is essential for handling multiple concurrent requests
        and ensuring that log data remains consistent.

    (5) Integration: Log4j can be easily integrated with other enterprise-level tools and frameworks, such as monitoring
        systems, alerting tools, and log analysis platforms, making it a valuable component in a larger ecosystem.

    (6) Logging Best Practices: Log4j promotes logging best practices, including log level hierarchy, efficient message
        formatting, and the separation of log messages into different categories, which are important for maintaining
        clean and manageable log output in complex enterprise systems.

    (7) Logging for Compliance: In enterprise environments where compliance with regulations (e.g., GDPR, HIPAA) is
        critical, proper logging is essential for audit trails and traceability. Log4j provides features that aid in
        achieving compliance requirements.

    (8) Community and Documentation: Log4j has a strong user community and extensive documentation, which makes it easier
        for enterprise developers to find solutions to common logging challenges and stay up to date with best practices.

    While Log4j remains a popular choice, it's important to note that there are also alternatives like Logback and SLF4J,
    which provide similar logging capabilities and may be preferred in some enterprise contexts. Ultimately, the choice
    of a logging framework depends on the specific requirements of the enterprise application and the development team's
    familiarity with the chosen framework.
________________________________________________________________________________________________________________________

*   Explain log4j log level and use case with a scenario ?

>>  A log level is a categorization or severity level used in logging to indicate the importance or severity of a log
    message. Log levels help developers and system administrators manage and filter log messages, making it easier to
    understand the behavior of an application or system and troubleshoot issues. Different log levels correspond to
    different levels of severity or importance in the logged events.

    The common log levels, ordered from the least severe to the most severe, include:

    (1) TRACE:

        The lowest and most detailed log level. Used for very fine-grained and detailed debugging information.

        Use Case : This is the lowest and most detailed log level. It is typically used for messages that provide the
        most granular information about what is happening within an application. Trace-level logs are useful for
        debugging and diagnosing issues.

        Scenario : If there is a method and we want to trace the input parameters value and value of other variables
        inside it, we can use TRACE

        ```
            public static double calculateAverage(double[] values) {
                double sum = 0.0;
                for (double value : values) {
                    sum += value;
                    logger.trace("Value : {}", value);
                }
                // tracing variable 'sum' value which will be calculated after adding 'values' array elements
                logger.trace("Summation : {}", sum);
                double avg = sum / values.length;
                // tracing variable 'avg' value once avg has been calculated
                logger.trace("Average : {}", avg);
                return avg;
            }
        ```

    (2) DEBUG:

        Used for debugging messages. Typically includes information about the flow of the program and variable values.
        These messages are useful during development and debugging but are usually not present in production code.

        Use Case :  DEBUG is a step above TRACE and provides a more general overview of the application's behavior,
        which makes it useful for development and tracking the flow of control.

        Scenario : If there is a method which calculates Average of array which calls another method to calculate sum of
        array, we can use DEBUG to get the flow of method calling and it's behaviour.

        ```
            public static double calculateAverage(double[] values) {
                // logging to debug the flow of this method by marking the entry and exit point
                logger.debug("Entered method : calculateAverage");
                double sum = calculateSum(values);
                logger.debug("Calculating average");
                double avg = sum / values.length;
                logger.debug("Exiting method : calculateAverage");
                return avg;
            }

            public static double calculateSum(double[] values) {
                // logging to debug the flow of this method by marking the entry and exit point
                logger.debug("Entered method : calculateSum");
                double sum = 0.0;
                for (double value : values) {
                    sum += value;
                }
                logger.debug("Exiting method : calculateSum");
                return sum;
            }

        ```

    (3) INFO:

        Used for informational messages that are relevant to the normal operation of the application. Examples include
        startup and shutdown messages, configuration changes, and other important events.

        Use Case : Info-level logs are used for informational messages that are relevant to the normal operation of an
        application. They can be used to record important events, such as when the application starts or stops,
        successful login attempts, or significant configuration changes.

        Scenario :  Let say a code make connection to DB and execute a query. We can use INFO level to log message
        providing info events like connection established, query executed etc

        ```
            public class MyApp {
                public static void main(String[] args) {
                    Connection connection = DriverManager.getConnection("db_url", "username", "password");
                    // log message providing info that connection to DB has been established
                    logger.info("Connection established");
                    Statement statement = connection.createStatement();
                    connection.executeQuery("SQL Query");
                    // log message giving info that query executed
                    logger.info("Query executed successfully");
                }
            }
        ```

    (4) WARN (Warning):

        Used for warning messages that indicate potential issues or situations that should be investigated but do not
        necessarily disrupt the application's operation.

        Use Case : Warning-level logs are used to highlight potential issues or anomalies that are not critical but
        should be investigated. For example, if an application encounters a situation that may lead to a problem in the
        future, it can log a warning.

        Scenario : Let say you code is keeping track of number failed login attempts and once the login attempt
        pass a threshold, you consider it as a malicious activity and could be threat to your application. In such case
        one can use WARN level logging which will log message as a warning to the system

        ```
            public class MyApp {
                public static void main(String[] args) {
                    // Simulate an unusual event (e.g., a spike in login attempts)
                    int loginAttempts = 1000;
                    if (loginAttempts > 500) {
                        // Log a warning for the unusual event
                        logger.warn("Unusual login activity detected: {} login attempts", loginAttempts);
                        // Take appropriate action (e.g., alert the security team)
                    }
                    // Continue with normal application flow
                }
            }
        ```


    (5) ERROR:

        Used to log error messages that indicate a problem or failure that has occurred during the application's execution.
        These messages represent significant issues but do not necessarily halt the application.

        Use Case : Error-level logs are used to indicate that a significant problem or error has occurred but the
        application can still continue running. These logs are typically used to capture exceptions and errors that need
        attention but do not necessarily halt the application.

        Scenario :  Let say code is making database connection. To log message on connection failure or to log on the
        exception, we can use ERROR level logger

        ```
            public class MyApp {
                public static void main(String[] args) {
                    try {
                        // Simulate a critical error (e.g., database connection failure)
                        if (!connectToDatabase()) {
                            // Log an error message for the critical error
                            logger.error("Database connection failed. Unable to continue.");
                            // Take appropriate action (e.g., handle the error, terminate the application)
                        }
                    } catch (Exception e) {
                        // Log an error for an unhandled exception
                        logger.error("An unexpected error occurred: {}", e.getMessage());
                    }

                    // Continue with normal application flow if possible
                }

                private static boolean connectToDatabase() {
                    // Simulate a database connection failure
                    return false;
                }
            }
        ```

    (6) FATAL (or CRITICAL):

        The most severe log level. Used to log critical errors or failures that are fatal to the application and result
        in termination or immediate shutdown.

        Use Case: Fatal-level logs are reserved for the most severe issues that result in the application's inability to
        continue running. These logs are used to record critical failures that require immediate attention, such as
        unrecoverable errors that lead to application termination.

        scenario : If code might end up in method deadlock which will lead to StackoverflowError, this would terminate
        the application. To log message in such case to get insight of what happened which terminate the application,
        we can use FATAL level logger

        ```
            public class MyApp {
                public static void main(String[] args) {
                    try{
                        // code that will raise StackOverflowError
                    }
                    catch(StackOverflowError e) {
                        // logging error as fatal as this might terminate the application
                        logger.fatal("An unexpected error occurred: {}", e.getMessage());
                    }
                }
            }
        ```

________________________________________________________________________________________________________________________

*   How to get started with Log4j2 ?

>>  Here's a step-by-step guide on how to get started with Log4j2:

    (1) Add Log4j2 Dependency:

        It's mandatory to add both 'log4j-api' and 'log4j-core' dependencies to your project as 'log4j-api' provides
        necessary interface and 'log4j-core' provides it implementation

        ```
            <dependencies>
                <dependency>
                    <groupId>org.apache.logging.log4j</groupId>
                    <artifactId>log4j-api</artifactId>
                    <version>2.14.1</version>
                </dependency>
                <dependency>
                    <groupId>org.apache.logging.log4j</groupId>
                    <artifactId>log4j-core</artifactId>
                    <version>2.14.1</version>
                </dependency>
            </dependencies>
        ```
    (2) Create a Log4j2 Configuration File:

        Log4j2 uses XML, JSON, YAML, or properties files for configuration. Create a configuration file (e.g.,
        log4j2.xml, log4j2.json, log4j2.yaml, or log4j2.properties) in your project's classpath.

        Here's a simple example in XML :

        ```
            <?xml version="1.0" encoding="UTF-8"?>
            <Configuration status="WARN">
                <Appenders>
                    <Console name="Console" target="SYSTEM_OUT">
                        <PatternLayout pattern="%d{HH:mm:ss.SSS} [%t] %-5level %logger{36} - %msg%n"/>
                    </Console>
                </Appenders>
                <Loggers>
                    <Root level="info">
                        <AppenderRef ref="Console"/>
                    </Root>
                </Loggers>
            </Configuration>
        ```

        Here's a simple example of .properties file :

        ```
            # Define the status level for Log4j 2 internal messages
            status = WARN

            # Define the appender named "Console"
            appender.console.type = Console
            appender.console.name = Console
            appender.console.target = SYSTEM_OUT
            appender.console.layout.type = PatternLayout
            appender.console.layout.pattern = %d{HH:mm:ss.SSS} [%t] %-5level %logger{36} - %msg%n

            # Root logger configuration
            rootLogger.level = info
            rootLogger.appenderRef.console.ref = Console
        ```

    (3) Configure Logging in Your Java Application:

        In your Java code, import the necessary Log4j2 classes and configure the logger. Here's a basic example:

        ```
            import org.apache.logging.log4j.LogManager;
            import org.apache.logging.log4j.Logger;

            public class MyApp {
                private static final Logger logger = LogManager.getLogger(MyApp.class);

                public static void main(String[] args) {
                    logger.debug("This is a debug message.");
                    logger.info("This is an info message.");
                    logger.warn("This is a warning message.");
                    logger.error("This is an error message.");
                }
            }
        ```
________________________________________________________________________________________________________________________

