*   What is Log4j2 Appenders ?

>>  Appenders are components responsible for handling log messages generated by an application. Appenders determine where
    log messages are written or how they are processed. They play a crucial role in the logging process, allowing
    developers to specify the destination or behavior of log messages.
________________________________________________________________________________________________________________________

*   List out various Log4j2 Appenders ?

>>  Log4j2 provides various appenders that determine where log messages are written. Below is a list of some commonly
    used appenders available in Log4j2:

    (1) ConsoleAppender: Writes log messages to the console (stdout or stderr).

    (2) FileAppender: Appends log messages to a specified file.

    (3) RollingFileAppender: Writes log messages to a file and automatically rolls over to a new file when a certain
        size or time interval is reached. This appender is useful for managing log files to prevent them from growing
        too large.

    (4) SMTPAppender: Sends log messages via email. It can be configured to send email notifications when specific log
        events occur.

    (5) SocketAppender: Sends log messages to a remote server using TCP or UDP protocols. Useful for centralizing logs
        from multiple sources. But first we have to make connection before using this Appenders as there is no option
        for authentication using log4j library.

    (6) SyslogAppender: Sends log messages to a syslog server, which is a standard logging protocol used on Unix-like
        --systems.

    (7) JMSAppender: Publishes log messages to a Java Message Service (JMS) topic or queue. Useful for integrating log
        messages with messaging systems.

    (8) NoSqlAppender: Writes log events to a NoSQL database, such as MongoDB or Cassandra.

    (9) RollingRandomAccessFileAppender: Similar to RollingFileAppender but optimized for high-throughput scenarios.

    (10) RandomAccessFileAppender: Writes log messages to a random access file. It's suitable for scenarios where you
        need to write logs quickly without rollover.

    (11) AsyncAppender: Wraps another appender and performs asynchronous logging. It can improve logging performance by
         offloading log messages to a separate thread.

    (12) FailoverAppender: Routes log messages to a primary appender but switches to a secondary appender if the primary
        fails. Useful for fault tolerance.

    (13) ListAppender: Appends log messages to an in-memory list or buffer. Useful for capturing log events in memory
        for testing or debugging purposes.

    (14) MemoryMappedFileAppender: Writes log messages to memory-mapped files, which can be beneficial for
         high-performance scenarios.

    (15) RollingRandomAccessFileManager: An alternative manager for the RollingRandomAccessFileAppender, offering more
         control over file management.

    (16) RoutableAppender: Allows you to route log messages to different appenders based on specific criteria, such as
         log levels, logger names, or markers.

    (17) ScriptAppenderSelector: Enables dynamic selection of appenders based on custom logic defined in scripts.

    (18) Custom Appenders: You can also create custom appenders by extending Log4j2's AppenderBase class and
         implementing your specific log message handling logic.
________________________________________________________________________________________________________________________

*   How to define Log4j2 Appenders ?

>>  In Log4j2, you can define Appenders in the log4j2.xml configuration file. Here's how you can define various types
    of Appenders and configure them:

    (1) Console Appender (for logging to the console):

        ```
            <Appenders>

                <!--
                    The <Console> tag defines the Console Appender.

                         -  'name' attribute: Specifies a unique name for the appender, which can be used for referencing it.
                         -  'target' attribute: Specifies the target where log messages will be sent. In this case, it's
                            "SYSTEM_OUT," which means the standard output (console).
                -->
                <Console name="ConsoleAppender" target="SYSTEM_OUT">

                    <!--
                        The <PatternLayout> tag defines the log message format i.e. how log messages will be displayed
                        in the console.

                            -   'pattern' attribute: Specifies a pattern for formatting log messages.
                            -   %d{HH:mm:ss.SSS}: Date and time in HH:mm:ss.SSS (hour:minute:second.millisecond) format.
                            -   [%t]: Thread name.
                            -   %-5level: Log level left-aligned with a minimum width of 5 characters.
                            -   %logger{36}: Logger name truncated to a maximum of 36 characters.
                            -   %msg: Log message.
                            -   %n: Newline character for separating log entries.
                    -->
                    <PatternLayout pattern="%d{HH:mm:ss.SSS} [%t] %-5level %logger{36} - %msg%n"/>
                </Console>
            </Appenders>
        ```

    (2) File Appender (for logging to a file):

        ```
            <Appenders>

                <!--
                    The <File> tag defines the File Appender.

                         -  'fileName' attribute: Specifies the path and name of the log file where log messages will
                            be written.
                            In this case, it's "C:/logs/app.log," which means log messages will be written to the
                            "app.log" file located in the "C:/logs" directory.
                -->
                <File name="FileAppender" fileName="C:/logs/app.log">

                    <PatternLayout pattern="%d{HH:mm:ss.SSS} [%t] %-5level %logger{36} - %msg%n"/>
                </File>
            </Appenders>
        ```
    (3) Rolling File Appender (for logging to a file with log file rotation having 1 hr of rollover ):

        ```
            <Appenders>

                <!--
                    The <RollingFile> tag defines the Rolling File Appender.

                         -  'fileName' attribute: Specifies the name of the initial log file. In this case, it's "app.log."
                         -  'filePattern' attribute: Specifies a pattern for naming rolled log files.
                         -  %d{MM-dd-yy-HH}: Date and time format in MM-dd-yy-HH (month-day-year-hour) format.
                            This pattern will result in rolled log files with names like "app-10-06-23-00.log"
                            where "10" is the month, "06" is the day, "23" is the year, and "00" is the hour.
                -->
                <RollingFile name="RollingFileAppender" fileName="app.log" filePattern="app-%d{MM-dd-yy-HH}.log">

                    <PatternLayout pattern="%d{HH:mm:ss.SSS} [%t] %-5level %logger{36} - %msg%n"/>

                    <!--
                        The <Policies> section defines the rolling policy for log files.
                        In this case, we're using a TimeBasedTriggeringPolicy, which triggers log file rolling
                        based on time intervals as well as size.

                        We can set multiple rolling policies for single <RollingFile>
                    ->
                    <Policies>

                        <!--
                            The <TimeBasedTriggeringPolicy> tag will set the policy to roll over new file based on time
                            interval defined in this tag

                                -   'interval' attribute: Specifies the time interval for log file rolling.
                                    In this case, "1" means rolling every hour as in 'filePattern' attribute of <RollingFile>
                                    has precision till 'HH' which makes 'interval' unit to be in hour.
                                -   'modulate' attribute: When set to "true," it ensures that log files are rolled at the
                                    start of each hour.
                        -->
                        <TimeBasedTriggeringPolicy interval="1" modulate="true" />

                        <!--
                            The <SizeBasedTriggeringPolicy> tag will define rollover policy to bes size based

                            -   'size' attribute: Specifies the maximum log file size in bytes. Log file rolling will
                                occur when the file size reaches this limit.
                        -->
                        <SizeBasedTriggeringPolicy size="10MB" />
                    </Policies>
                </RollingFile>
            </Appenders>
        ```

    (4) SMTP Appender (for sending log messages via email):

        ```
            <Appenders>

                <!--
                    The <SMTP> tag defines the SMTP Appender.

                        -   'subject' attribute: Specifies the subject line for the email containing the log event.
                        -   'to' attribute: Specifies the recipient's email address where log events will be sent.
                        -   'from' attribute: Specifies the sender's email address.
                        -   'smtpHost' attribute: Specifies the SMTP server host to use for sending emails.
                        -   'smtpPort' attribute: Specifies the SMTP server port to use (e.g., 25 for unencrypted SMTP).
                        -   'smtpUsername' attribute: Specifies the username for SMTP authentication (if required).
                        -   'smtpPassword' attribute: Specifies the password for SMTP authentication (if required).
                -->
                <SMTP name="SMTPAppender" subject="Log Event" to="recipient@example.com"
                        from="sender@example.com" smtpHost="smtp.example.com" smtpPort="25"
                        smtpUsername="your_username" smtpPassword="your_password">

                    <PatternLayout pattern="%d{HH:mm:ss.SSS} [%t] %-5level %logger{36} - %msg%n"/>
                </SMTP>
            </Appenders>
        ```

    (5) Socket Appender (for sending log messages to a remote server which remote server will have service to receive
        it):

        ```
            <Appenders>

                <!--
                    The <Socket> tag defines the Socket Appender.

                        -   'host' attribute: Specifies the hostname or IP address of the remote server where log events
                            will be sent.
                        -   'port' attribute: Specifies the port number on the remote server where the socket connection
                            will be established.
                 -->
                <Socket name="SocketAppender" host="remote_server" port="4560">

                    <PatternLayout pattern="%d{HH:mm:ss.SSS} [%t] %-5level %logger{36} - %msg%n"/>
                </Socket>
            </Appenders>
        ```
________________________________________________________________________________________________________________________